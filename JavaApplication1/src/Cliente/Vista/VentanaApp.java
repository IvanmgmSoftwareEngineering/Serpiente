package Cliente.Vista;

 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import Cliente.Controlador.Controlador;
import Cliente.Modelo.GameEvent;
import Cliente.Modelo.GameModel;
import java.awt.Color;
import javax.swing.*;
import java.util.List;
import java.util.ArrayList;
import Cliente.Observable.Observer;
import java.awt.GridLayout;
import java.util.logging.Level;
import java.util.logging.Logger;



/**
 *
 * @author i.martingo.2016
 */
public class VentanaApp  extends JFrame implements Observer, GUISerpiente {

    /**
     * Creates new form NewJFrame
     */
    
    private final int NUM_FILAS = 70; 
    private final int NUM_COLUMNAS = 50;
    private List<Serpiente> serpientes;
    private JPanel [][] matriz;
    private Controlador controlador;
    private boolean nombreIntroducido = false;
    private int posicionCabezaFila;
    private int posicionCabezaColumna;
    private Color color;
    
    public VentanaApp(Controlador controlador) {
        this.controlador = controlador;
        initComponents();
        serpientes = new ArrayList<Serpiente>();
        matriz = new JPanel [NUM_FILAS][NUM_COLUMNAS];
        this.jPanel2.setLayout(new GridLayout(NUM_FILAS,NUM_COLUMNAS));
        this.posicionCabezaFila = NUM_FILAS/2;
        this.posicionCabezaColumna = NUM_COLUMNAS/2;
        desplegableColores.addItem("Green");
        desplegableColores.addItem("Red");
        desplegableColores.addItem("Black");
        desplegableColores.addItem("Blue");
        introducirNombre.setText("Introduzca nombre del jugador, el color y pulsar iniciar");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        botonIniciar = new javax.swing.JButton();
        introducirNombre = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        muestraNombre = new javax.swing.JTextPane();
        muestraCoordenadaX = new javax.swing.JTextField();
        muestraCoordenadaY = new javax.swing.JTextField();
        botonGirarArriba = new javax.swing.JButton();
        botonGirarIzquierda = new javax.swing.JButton();
        botonGirarDerecha = new javax.swing.JButton();
        botonGirarAbajo = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        botonPausa = new javax.swing.JButton();
        desplegableColores = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Nombre");

        jLabel2.setText("Eje Y");

        jLabel3.setText("Eje X");

        botonIniciar.setText("Iniciar");
        botonIniciar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botonIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIniciarActionPerformed(evt);
            }
        });

        introducirNombre.setText("Introduzca nombre del jugador y pulsar iniciar");
        introducirNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                introducirNombreActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(muestraNombre);

        botonGirarArriba.setText("▲");
        botonGirarArriba.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botonGirarArriba.setEnabled(false);

        botonGirarIzquierda.setText("◀");
        botonGirarIzquierda.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botonGirarIzquierda.setEnabled(false);
        botonGirarIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGirarIzquierdaActionPerformed(evt);
            }
        });

        botonGirarDerecha.setText("►");
        botonGirarDerecha.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botonGirarDerecha.setEnabled(false);
        botonGirarDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGirarDerechaActionPerformed(evt);
            }
        });

        botonGirarAbajo.setText("▼");
        botonGirarAbajo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botonGirarAbajo.setEnabled(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 585, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 303, Short.MAX_VALUE)
        );

        botonPausa.setText("Pause");
        botonPausa.setEnabled(false);
        botonPausa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPausaActionPerformed(evt);
            }
        });

        desplegableColores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        desplegableColores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desplegableColoresActionPerformed(evt);
            }
        });

        jLabel4.setText("Color");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(muestraCoordenadaX, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(51, 51, 51)
                                        .addComponent(jLabel3)
                                        .addGap(19, 19, 19)
                                        .addComponent(muestraCoordenadaY, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botonGirarIzquierda, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(botonGirarAbajo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(botonGirarDerecha, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(introducirNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botonGirarArriba, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(209, 209, 209)
                                .addComponent(botonIniciar)
                                .addGap(34, 34, 34)
                                .addComponent(botonPausa))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(desplegableColores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(introducirNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(muestraCoordenadaX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(muestraCoordenadaY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(botonGirarArriba, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonGirarIzquierda, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonGirarDerecha, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonGirarAbajo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(desplegableColores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonIniciar)
                    .addComponent(botonPausa))
                .addContainerGap(416, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIniciarActionPerformed
        if(botonIniciar.getText() == "Iniciar" && nombreIntroducido == true && desplegableColores.getSelectedItem()!= " " ) {
            this.posicionCabezaFila = NUM_FILAS/2;
            this.posicionCabezaColumna = NUM_COLUMNAS/2;
            muestraCoordenadaX.setEnabled(true);
            muestraCoordenadaY.setEnabled(true);
            muestraCoordenadaX.setText(String.valueOf(posicionCabezaFila));
            muestraCoordenadaY.setText(String.valueOf(posicionCabezaFila));
            botonIniciar.setEnabled(false);
            botonPausa.setEnabled(true);
            botonGirarDerecha.setEnabled(true);
            botonGirarIzquierda.setEnabled(true);
            botonGirarAbajo.setEnabled(true);
            botonGirarArriba.setEnabled(true);
            botonIniciar.setText("Reiniciar");
            desplegableColores.setEnabled(false);
            this.controlador.start(); 
        }
        else if (botonIniciar.getText() == "Reiniciar"){
            desplegableColores.setEnabled(true);
            desplegableColores.setSelectedItem(" ");
            botonIniciar.setText("Iniciar");
            botonGirarDerecha.setEnabled(false);
            botonGirarIzquierda.setEnabled(false);
            botonGirarAbajo.setEnabled(false);
            botonGirarArriba.setEnabled(false);
            botonPausa.setText("Pause");
            botonPausa.setEnabled(false);
            muestraNombre.setText("");
            introducirNombre.setText("Introduzca nombre del jugador y pulsar iniciar");
            muestraCoordenadaX.setText("-");
            muestraCoordenadaY.setText("-");
            nombreIntroducido = false;
            this.controlador.reiniciar();
        }
    }//GEN-LAST:event_botonIniciarActionPerformed

    private void introducirNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_introducirNombreActionPerformed
        if(introducirNombre.getText().length()>0 && introducirNombre.getText().length()<10){
            muestraNombre.setText(introducirNombre.getText());
            introducirNombre.setText("");
            nombreIntroducido = true;
        }
        else{
            introducirNombre.setCaretColor(Color.red);
        }

    }//GEN-LAST:event_introducirNombreActionPerformed

    private void botonPausaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPausaActionPerformed
        if(botonPausa.getText() == "Pause") {
            botonIniciar.setEnabled(true);
            botonPausa.setText("Reanudar");
            botonGirarDerecha.setEnabled(false);
            botonGirarIzquierda.setEnabled(false);
            botonGirarAbajo.setEnabled(false);
            botonGirarArriba.setEnabled(false);
            this.controlador.pause();
         }
        else if (botonPausa.getText() == "Reanudar"){
            this.controlador.reanudar();
            botonPausa.setText("Pause");
            botonGirarDerecha.setEnabled(true);
            botonGirarIzquierda.setEnabled(true);
            botonGirarAbajo.setEnabled(true);
            botonGirarArriba.setEnabled(true);
        }
        
        
    }//GEN-LAST:event_botonPausaActionPerformed

    private void botonGirarDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGirarDerechaActionPerformed
        
    }//GEN-LAST:event_botonGirarDerechaActionPerformed

    private void desplegableColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desplegableColoresActionPerformed
        this.definirColorSerpiente((String)desplegableColores.getSelectedItem());
       
    }//GEN-LAST:event_desplegableColoresActionPerformed

    private void botonGirarIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGirarIzquierdaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonGirarIzquierdaActionPerformed

    
    
    
    public int getNumFilas() {
        return NUM_FILAS;
    }

    public int getNumColumnas() {
        return NUM_COLUMNAS;
    }
    
    public JTextField getMuestraCoordenadaX() {
        return muestraCoordenadaX;
    }

    public JTextField getMuestraCoordenadaY() {
        return muestraCoordenadaY;
    }
    
    public  void rellenaPanel (){
                
                for(int i =0; i<NUM_FILAS ; i++){
                    for(int j =0; j<NUM_COLUMNAS ; j++){
                            JPanel panel = new JPanel();
                            matriz[i][j]= new JPanel();
                            matriz[i][j].setBackground(Color.white);
                            this.jPanel2.add(matriz[i][j]); 
                    }
                }
            }
     
    public void ponerBlanco () {
        for(int i =0; i<NUM_FILAS ; i++){
            for(int j =0; j<NUM_COLUMNAS ; j++){
                matriz[i][j].setBackground(Color.white); 
            }
        }
     }
    
    //public JPanel muestraPosicion (JPanel panelPrincipal){
        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        SwingUtilities.invokeLater(new Runnable() { 
            //EDT (Event dispatch Thread: es la hebra de despacho de swin, es la hebra que se encarga de despachar la hebras
            //SwingUgilities clase que contiene el metodod static 'invokeLater'
            //Runnable: interfaz que solo tiene el método run.
            // el objetivo de lo anterior es crear una cola de eventos para ir almacenando los eventos
            public void run() {
                GameModel modelo = new GameModel();
                VentanaApp ventana = new VentanaApp(new Controlador(modelo));
                modelo.addObserver(ventana);
                ventana.setVisible(true);
                ventana.rellenaPanel();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonGirarAbajo;
    private javax.swing.JButton botonGirarArriba;
    private javax.swing.JButton botonGirarDerecha;
    private javax.swing.JButton botonGirarIzquierda;
    private javax.swing.JButton botonIniciar;
    private javax.swing.JButton botonPausa;
    private javax.swing.JComboBox<String> desplegableColores;
    private javax.swing.JTextField introducirNombre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField muestraCoordenadaX;
    private javax.swing.JTextField muestraCoordenadaY;
    private javax.swing.JTextPane muestraNombre;
    // End of variables declaration//GEN-END:variables

    @Override
    public void notifyEvent(GameEvent evento) {
        
        SwingUtilities.invokeLater(new Runnable() {
            //SwingUgilities clase que contiene el metodod static 'invokeLater'
            //Runnable: interfaz que solo tiene el método run
            // el objetivo de lo anterior es crear una cola de eventos para ir almacenando los eventos
            @Override
            public void run() {
                manejarEvento(evento);
            } 
        });
    }
    
    public void manejarEvento (GameEvent evento) {
        switch (evento.getEvento()){
            
            case START: 
               Serpiente serpiente1 = new Serpiente("green", 10, this);
               serpientes.add(serpiente1);
               serpiente1.start();
                
               break; 
  
            case PAUSE:
                for (Serpiente serpiente : serpientes) {
                   serpiente.pausar();
                }
                
                break;
                
            case REANUDAR:
                
                for (Serpiente serpiente : serpientes) {
                    serpiente.reanudar();
                }
                
                break;
                
            case REINICIAR:
                for (Serpiente serpiente : serpientes){
                    serpiente.interrupt();
                }
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        ponerBlanco();  
                    }
                });
                                    
                 
                serpientes.clear();
              
                break;
            
            
        }
        
    }
    
    @Override
    public boolean serpienteEstaDentroLimitesDelTablero(){
        return posicionCabezaFila > 0 && posicionCabezaColumna > 0 && posicionCabezaFila < this.NUM_FILAS-1 && posicionCabezaColumna < this.NUM_COLUMNAS-1;
    }
    @Override
    public void mostrarGameOver (){
        botonIniciar.setEnabled(true);
        botonPausa.setEnabled(false);
        //Muestra la G
        matriz[30][20].setBackground(Color.red);
        matriz[30][19].setBackground(Color.red);
        matriz[30][18].setBackground(Color.red);
        matriz[30][17].setBackground(Color.red);
        matriz[30][16].setBackground(Color.red);
        matriz[31][16].setBackground(Color.red);
        matriz[32][16].setBackground(Color.red);
        matriz[33][16].setBackground(Color.red);
        matriz[34][16].setBackground(Color.red);
        matriz[35][16].setBackground(Color.red);
        matriz[36][16].setBackground(Color.red);
        matriz[37][16].setBackground(Color.red);
        matriz[38][16].setBackground(Color.red);
        matriz[39][16].setBackground(Color.red);
        matriz[40][16].setBackground(Color.red);        
        matriz[40][17].setBackground(Color.red);
        matriz[40][18].setBackground(Color.red);
        matriz[40][19].setBackground(Color.red);
        matriz[40][20].setBackground(Color.red);
        matriz[40][20].setBackground(Color.red);
        matriz[40][21].setBackground(Color.red);
        matriz[39][21].setBackground(Color.red);
        matriz[38][21].setBackground(Color.red);
        matriz[37][21].setBackground(Color.red);
        matriz[36][21].setBackground(Color.red);
        matriz[36][20].setBackground(Color.red);
        matriz[36][19].setBackground(Color.red);
   
         
        //Muestra la A
        matriz[30][25].setBackground(Color.red);
        matriz[31][25].setBackground(Color.red);
        matriz[32][25].setBackground(Color.red);
        matriz[33][25].setBackground(Color.red);
        matriz[34][25].setBackground(Color.red);
        matriz[35][25].setBackground(Color.red);
        matriz[36][25].setBackground(Color.red);
        matriz[37][25].setBackground(Color.red);
        matriz[38][25].setBackground(Color.red);
        matriz[39][25].setBackground(Color.red);
        matriz[40][25].setBackground(Color.red);       
        matriz[30][26].setBackground(Color.red);
        matriz[30][27].setBackground(Color.red);
        matriz[30][28].setBackground(Color.red);
        matriz[30][29].setBackground(Color.red);
        matriz[30][30].setBackground(Color.red);
        matriz[30][30].setBackground(Color.red);
        matriz[31][30].setBackground(Color.red);
        matriz[32][30].setBackground(Color.red);
        matriz[33][30].setBackground(Color.red);
        matriz[34][30].setBackground(Color.red);
        matriz[35][30].setBackground(Color.red);
        matriz[36][30].setBackground(Color.red);
        matriz[37][30].setBackground(Color.red);
        matriz[38][30].setBackground(Color.red);
        matriz[39][30].setBackground(Color.red);
        matriz[40][30].setBackground(Color.red);
        matriz[40][29].setBackground(Color.red);
        matriz[40][28].setBackground(Color.red);
        matriz[40][27].setBackground(Color.red);
        matriz[40][26].setBackground(Color.red);
               
        //Muestra el punto
        matriz[40][23].setBackground(Color.red);
    }

    @Override
    public void moverSerpiente(Direccion direccion) {
       
         this.matriz[posicionCabezaFila][posicionCabezaColumna].setBackground(Color.white);
         this.matriz[posicionCabezaFila + direccion.getVariacionFila()][posicionCabezaColumna + direccion.getVariacionColumna()].setBackground(this.color);
         posicionCabezaFila += direccion.getVariacionFila();
         posicionCabezaColumna += direccion.getVariacionColumna();
            
    }

    @Override
    public void definirColorSerpiente(String color) {
        
        switch (color){
            
            case "Green":
                
                this.color = Color.green;
                break;
             
            case "Red":
                
                this.color = Color.red; 
                break;
                
            case "Black":
                
                this.color = Color.black; 
                break;   
                
             case "Blue":
                
                this.color = Color.blue; 
                break;  
        }
    }
    
    @Override
    public void mostrarCoordenadasCabeza(){
        muestraCoordenadaX.setText(String.valueOf(posicionCabezaFila));
        muestraCoordenadaY.setText(String.valueOf(posicionCabezaColumna));
    }
}
